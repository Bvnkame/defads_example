local log = {}

local function format_value(v)
	if type(v) == "string" then
		return "\"" .. v .. "\""
	else
		return tostring(v)
	end
end

local __pprint = pprint
pprint = function(t, indent)
	indent = indent or ""
	if type(t) == "table" then
		for k,v in pairs(t) do
			if type(v) == "table" then
				print(indent .. format_value(k) .. " = {")
				pprint(v, indent .. "   ")
				print("}")
			else
				print(indent .. format_value(k) .. " = " .. format_value(v))
			end
		end
	else
		print(indent .. format_value(k))
	end
end

local _print = print
print = function(...)
	local t = { ... }
	for i=1,#t do
		t[i] = tostring(t[i])
	end
	table.insert(log, table.concat(t, "\t"))
	_print(...)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_render_order(7)
	gui.set_enabled(gui.get_node("bg"), false)
	
	self.log = gui.get_node("log")
	self.tap_count = 0
	self.tap_time = 0
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	gui.set_text(self.log, table.concat(log, "\n"))
end

function on_input(self, action_id, action)
	if action.released then
		if self.tap_count == 0 or (socket.gettime() - self.tap_time) > 0.5 then
			self.tap_count = 1
		else
			self.tap_count = self.tap_count + 1
			if self.tap_count == 5 then
				self.tap_count = 0
				gui.set_enabled(gui.get_node("bg"), not gui.is_enabled(gui.get_node("bg")))
			end
		end
		self.tap_time = socket.gettime()
	end
end

function on_reload(self)
    -- Add input-handling code here
    -- Remove this function if not needed
end
